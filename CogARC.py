"""Processing of data files recording human subjects solutions to ARC tasks.
Data generated by the following web-based task implementations are supported:
  - github.com/ahn-cj/ARC-behavioral
  - github.com/lbakst/ARC-eyetracking
"""

import json
import glob
from os.path import basename, join
from datetime import datetime

import numpy as np
from matplotlib import pyplot as plt, colors

__author__ = "Michael Pascale"
__copyright__ = "Copyright 2024, Michael Pascale"
__credits__ = ["Quan Do", "Caroline Ahn", "Leah Bakst"]
__license__ = "MIT"

ColorMaps = {
  'default':  colors.ListedColormap(['#2B2B2B', '#248ADA','#C71010','#1FC719','#F7DE28', '#878494', '#F954F2', '#EE6000', '#6B23A9', '#8B5A28']),
  'bright':   colors.ListedColormap(['#4A4A4A', '#4FAEFF', '#FF3232', '#4FF74F', '#FFF755', '#A8A5B2', '#FF78FF', '#FF8032', '#944EFF', '#AA7332']),
  'dark':     colors.ListedColormap(['#1A1A1A', '#1B6CA0', '#9A0B0B', '#169A16', '#C6B321', '#67626C', '#C23CC2', '#B04D00', '#4E1A74', '#603E1E']),
  'muted':    colors.ListedColormap(['#474747', '#5D8EB8', '#B75454', '#6AC76A', '#F6E08D', '#9995A5', '#F487F3', '#F08B47', '#8A68B0', '#A48355'])
}

class ARCTask():
  _cmap = ColorMaps['default']
  _symbolnames = ['black', 'blue', 'red', 'green', 'yellow', 'grey', 'pink', 'orange', 'purple', 'brown']
  _norm = colors.Normalize(vmin = 0, vmax = 9)
  
  def __init__(self, filename, taskname=None):
    with open(filename) as file:
      self._filename = filename
      self._taskname = taskname or basename(filename)
      self._data = json.load(file)

      self.train = [np.stack([np.array(pair['input']), np.array(pair['output'])]) for pair in self._data['train']]
      assert all(len(pair) == 2 for pair in self.train), "Expected all training examples to come in pairs (input + output)."
      
      self.test = [np.stack([np.array(pair['input']), np.array(pair['output'])]) for pair in self._data['test']]
      assert all(len(pair) == 2 for pair in self.test), "Expected all tests to come in pairs (input + output)."
      
  def show(self, name=True):
    fig, axs = plt.subplots(2, len(self.train) + len(self.test), figsize=(4,2), dpi=600, layout='constrained')
    
    for i, pair in enumerate(self.train):
      axs[0,i].set_title('Example %d' % (i + 1))
      axs[0,i].imshow(pair[0], cmap=self._cmap, norm=self._norm)
      axs[1,i].imshow(pair[1], cmap=self._cmap, norm=self._norm)
    
    for i, pair in enumerate(self.test):
      axs[0,i+len(self.train)].set_title('Test %d' % (i + 1))
      axs[0,i+len(self.train)].imshow(pair[0], cmap=self._cmap, norm=self._norm)
      axs[1,i+len(self.train)].imshow(pair[1], cmap=self._cmap, norm=self._norm)
      
    for ax in axs.ravel():
        ax.set_axis_off()

    if name:
      plt.suptitle(self._taskname)

    # fig.align_titles()                        # new in recent matplotlib
    
    plt.show()
    return fig
  
  def __repr__(self):
    return('<ARCTask "%s", loaded from "%s">' % (self._taskname, self._filename))


class ARCTaskSet():
  def __init__(self, filepaths, tasknames=None):
    self._tasks = [None] * len(filepaths)
    self._names = {}
    
    if tasknames is not None:
      assert len(filepaths) == len(tasknames)
      
    for i, path in enumerate(filepaths):
      try:
        name = tasknames[i] if tasknames is not None else basename(path)
        self._tasks[i] = ARCTask(path, name)
      except FileNotFoundError:
        print('ERROR: The file does not exist %s' % path)
      except:
        print('ERROR: Could not process file %s' % path)

  def show(self, task):
    return self[task].show()
  
  def __getitem__(self, task):
    if isinstance(task, int):
      if task < 1 or task > len(self._tasks):
        raise IndexError(f"ARCTaskSet has {len(self._tasks)} tasks, and is indexed from 1, but asked for task {task}.")
      return self._tasks[task-1]
      
    assert isinstance(task, str)
    raise NotImplementedError('ARCTaskSet.__getitem__() does not yet handle task lookup by task id.')
  
  def __repr__(self):
    return('<ARCTaskSet of %d tasks>' % len(self._tasks))


class ARCBehavior():
  
  def __init__(self, filename):
    with open(filename) as file:
      self._filename = filename
      self._data = json.load(file)
      
      # Handle different versions encapsulating the top level object in an array.
      if isinstance(self._data, list):
        assert len(self._data) == 1, ('Top-level JSON array must contain exactly one element %s' % filename)
        self._data = self._data[0]
      
      # Version
      self._version = None
      if 'version' in self._data:
        self._version = self._data['version']
      
      # Subject ID
      assert 'subj_ID' in self._data, ('File must contain object with key "subj_ID". %s' % filename)
      self._subject = self._data['subj_ID']
      
      # Timestamp
      assert 'start_time' in self._data, ('File must contain object with key "start_time". %s' % filename)
      
      try:
        self._timestamp = self._data['start_time'].replace('GMT', '').split('(')[0].rstrip()
        self._timestamp = datetime.strptime(self._data['start_time'].replace('GMT', '').split('(')[0].rstrip(), "%a %b %d %Y %H:%M:%S %z")
      except ValueError:
        raise ValueError('File contains invalid timestamp %s, "%s"' % (filename, self._timestamp))
      
      # Session Array
      assert 'session' in self._data, ('File must contain object with key "session". %s' % filename)
      self._data = self._data['session']
  
  def __repr__(self):
    return('<ARCBehavior for subject "%s", loaded from "%s">' % (self._subject, self._filename))

